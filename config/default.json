{
  "$schema": "https://agno.ai/schemas/config/v1.0.json",
  "version": "1.0",
  
  "_comment": "Transcendental Agent Framework Configuration - Production Default",

  "metadata": {
    "description": "Production configuration for the Transcendental Agent Framework",
    "created": "2025-01-14T00:00:00Z",
    "environment": "${AGNO_ENV:-production}",
    "schema_version": "1.0"
  },

  "providers": {
    "_comment": "Provider definitions with credentials and connection settings",
    
    "anthropic": {
      "type": "anthropic",
      "enabled": true,
      "credentials": {
        "api_key": "${ANTHROPIC_API_KEY}",
        "_comment": "Anthropic API key from https://console.anthropic.com"
      },
      "settings": {
        "base_url": "https://api.anthropic.com",
        "timeout": 60,
        "max_retries": 3,
        "retry_delay": 1000
      },
      "rate_limits": {
        "requests_per_minute": 60,
        "tokens_per_minute": 100000
      }
    },
    
    "bedrock": {
      "type": "aws-bedrock",
      "enabled": "${AWS_ACCESS_KEY_ID:+true}",
      "_comment": "Enabled only if AWS credentials are present",
      "credentials": {
        "access_key_id": "${AWS_ACCESS_KEY_ID}",
        "secret_access_key": "${AWS_SECRET_ACCESS_KEY}",
        "session_token": "${AWS_SESSION_TOKEN}"
      },
      "settings": {
        "region": "${AWS_REGION:-us-east-1}",
        "endpoint_url": "${AWS_BEDROCK_ENDPOINT}",
        "service_name": "bedrock-runtime"
      }
    },
    
    "openai": {
      "type": "openai",
      "enabled": true,
      "credentials": {
        "api_key": "${OPENAI_API_KEY}",
        "organization": "${OPENAI_ORG_ID}"
      },
      "settings": {
        "base_url": "https://api.openai.com/v1",
        "timeout": 60,
        "api_version": "2024-01-01"
      },
      "rate_limits": {
        "requests_per_minute": 500,
        "tokens_per_minute": 200000
      }
    },
    
    "google": {
      "type": "google-gemini",
      "enabled": true,
      "credentials": {
        "api_key": "${GOOGLE_API_KEY}",
        "project_id": "${GOOGLE_PROJECT_ID}"
      },
      "settings": {
        "location": "${GOOGLE_REGION:-us-central1}",
        "use_vertex": false
      }
    },
    
    "deepseek": {
      "type": "deepseek",
      "enabled": "${DEEPSEEK_API_KEY:+true}",
      "credentials": {
        "api_key": "${DEEPSEEK_API_KEY}",
        "_comment": "DeepSeek API key from https://platform.deepseek.com"
      },
      "settings": {
        "base_url": "https://api.deepseek.com",
        "timeout": 60,
        "max_retries": 3,
        "retry_delay": 1000
      },
      "rate_limits": {
        "requests_per_minute": 100,
        "tokens_per_minute": 150000
      }
    },
    
    "custom": {
      "_comment": "Template for custom provider extensions",
      "type": "custom",
      "enabled": false,
      "handler": "extensions.providers.custom_provider",
      "credentials": {},
      "settings": {}
    }
  },

  "models": {
    "_comment": "Model definitions and aliases - abstracts providers from usage",
    
    "aliases": {
      "_comment": "Simple string aliases for common models",
      "fast": "claude-3.5-haiku",
      "balanced": "claude-3.5-sonnet", 
      "powerful": "claude-opus-4",
      "reasoning": "o3",
      "vision": "gemini-2.5-pro",
      "coding": "claude-opus-4",
      "thinking": "gemini-2.5-pro"
    },
    
    "definitions": {
      "_comment": "Detailed model configurations with provider mappings",
      
      "default": {
        "description": "Default model for general use",
        "provider_chain": ["anthropic", "openai", "bedrock"],
        "model_selector": {
          "anthropic": "claude-3.5-haiku-20241022",
          "openai": "gpt-4o-mini",
          "bedrock": "anthropic.claude-3.5-haiku-20241022-v1:0",
          "google": "gemini-2.5-flash",
          "deepseek": "deepseek-chat"
        },
        "parameters": {
          "temperature": 0.7,
          "max_tokens": 2048,
          "top_p": 0.9
        }
      },
      
      "analyzer": {
        "description": "High-reasoning model for complex analysis",
        "provider_chain": ["anthropic", "openai"],
        "model_selector": {
          "anthropic": "claude-opus-4-20250514",
          "openai": "o3",
          "bedrock": "anthropic.claude-opus-4-20250514-v1:0",
          "google": "gemini-2.5-pro",
          "deepseek": "deepseek-reasoner"
        },
        "parameters": {
          "temperature": 0.3,
          "max_tokens": 4096,
          "top_p": 0.95
        },
        "capabilities": ["reasoning", "code_analysis", "long_context"]
      },
      
      "creative": {
        "description": "Creative writing and generation",
        "provider_chain": ["openai", "anthropic"],
        "model_selector": {
          "openai": "gpt-4o",
          "anthropic": "claude-3.5-sonnet-20241022",
          "bedrock": "anthropic.claude-3.5-sonnet-20241022-v2:0",
          "google": "gemini-2.5-flash"
        },
        "parameters": {
          "temperature": 0.9,
          "max_tokens": 2048,
          "frequency_penalty": 0.5,
          "presence_penalty": 0.5
        }
      },
      
      "thinking": {
        "description": "Deep reasoning with thinking models",
        "provider_chain": ["google", "openai", "anthropic"],
        "model_selector": {
          "google": "gemini-2.5-pro",
          "openai": "o3",
          "anthropic": "claude-opus-4-20250514",
          "deepseek": "deepseek-reasoner"
        },
        "parameters": {
          "temperature": 0.2,
          "max_tokens": 8192,
          "thinking_mode": "extended"
        },
        "capabilities": ["reasoning", "math", "complex_analysis", "thinking"]
      },
      
      "coding": {
        "description": "Specialized coding and software development",
        "provider_chain": ["anthropic", "openai", "deepseek"],
        "model_selector": {
          "anthropic": "claude-opus-4-20250514",
          "openai": "gpt-4.1-2025-04-14",
          "bedrock": "anthropic.claude-opus-4-20250514-v1:0",
          "deepseek": "deepseek-chat"
        },
        "parameters": {
          "temperature": 0.1,
          "max_tokens": 8192
        },
        "capabilities": ["code_generation", "debugging", "refactoring", "testing"]
      },
      
      "vision": {
        "description": "Visual understanding and multimodal analysis",
        "provider_chain": ["google", "anthropic", "openai"],
        "model_selector": {
          "google": "gemini-2.5-pro",
          "anthropic": "claude-3.5-sonnet-20241022",
          "openai": "gpt-4o"
        },
        "parameters": {
          "temperature": 0.5,
          "max_tokens": 4096
        },
        "capabilities": ["image_analysis", "visual_reasoning", "multimodal"]
      },
      
      "fast_reasoning": {
        "description": "Quick reasoning for high-volume tasks",
        "provider_chain": ["openai", "google", "deepseek"],
        "model_selector": {
          "openai": "o4-mini",
          "google": "gemini-2.5-flash",
          "deepseek": "deepseek-chat"
        },
        "parameters": {
          "temperature": 0.3,
          "max_tokens": 2048
        },
        "capabilities": ["fast_reasoning", "cost_effective", "high_volume"]
      },
      
      "creative_reasoning": {
        "description": "Creative thinking with reasoning capabilities",
        "provider_chain": ["deepseek", "google", "anthropic"],
        "model_selector": {
          "deepseek": "deepseek-reasoner",
          "google": "gemini-2.5-flash",
          "anthropic": "claude-3.5-sonnet-20241022",
          "openai": "gpt-4o"
        },
        "parameters": {
          "temperature": 0.7,
          "max_tokens": 3072,
          "top_p": 0.9
        },
        "capabilities": ["creative_thinking", "reasoning", "exploration", "cost_effective"]
      },
      
      "scientific_method": {
        "description": "Systematic analysis using scientific reasoning",
        "provider_chain": ["deepseek", "openai", "google"],
        "model_selector": {
          "deepseek": "deepseek-reasoner",
          "openai": "o3-mini",
          "google": "gemini-2.0-flash-thinking-experimental",
          "anthropic": "claude-3.5-sonnet-20241022"
        },
        "parameters": {
          "temperature": 0.2,
          "max_tokens": 4096,
          "thinking_mode": "systematic"
        },
        "capabilities": ["hypothesis_testing", "systematic_analysis", "reasoning", "cost_effective"]
      },
      
      "practical_solver": {
        "description": "Practical problem solving with good cost-performance balance",
        "provider_chain": ["deepseek", "google", "openai"],
        "model_selector": {
          "deepseek": "deepseek-chat",
          "google": "gemini-2.5-flash",
          "openai": "gpt-4o-mini",
          "anthropic": "claude-3.5-haiku-20241022"
        },
        "parameters": {
          "temperature": 0.5,
          "max_tokens": 2048
        },
        "capabilities": ["problem_solving", "practical", "efficient", "cost_effective"]
      }
    },
    
    "provider_mappings": {
      "_comment": "Maps generic model names to provider-specific IDs",
      "anthropic": {
        "claude-opus-4": "claude-opus-4-20250514",
        "claude-3.7-sonnet": "claude-3.7-sonnet-20250215",
        "claude-3.5-sonnet": "claude-3.5-sonnet-20241022",
        "claude-3.5-haiku": "claude-3.5-haiku-20241022",
        "claude-3-opus": "claude-3-opus-20240229",
        "claude-3-sonnet": "claude-3-5-sonnet-20241022",
        "claude-3-haiku": "claude-3-haiku-20240307",
        "claude-2.1": "claude-2.1",
        "claude-2": "claude-2",
        "haiku": "claude-3-haiku-20240307",
        "opus": "claude-3-opus-20240229",
        "sonnet": "claude-3-5-sonnet-20241022"
      },
      "bedrock": {
        "claude-opus-4": "anthropic.claude-opus-4-20250514-v1:0",
        "claude-3.7-sonnet": "anthropic.claude-3.7-sonnet-20250215-v1:0",
        "claude-3.5-sonnet": "anthropic.claude-3.5-sonnet-20241022-v2:0",
        "claude-3.5-haiku": "anthropic.claude-3.5-haiku-20241022-v1:0",
        "claude-3-opus": "anthropic.claude-3-opus-20240229-v1:0",
        "claude-3-sonnet": "anthropic.claude-3-5-sonnet-20241022-v2:0",
        "claude-3-haiku": "anthropic.claude-3-haiku-20240307-v1:0",
        "claude-2.1": "anthropic.claude-v2:1",
        "claude-2": "anthropic.claude-v2",
        "haiku": "anthropic.claude-3-haiku-20240307-v1:0",
        "opus": "anthropic.claude-3-opus-20240229-v1:0",
        "sonnet": "anthropic.claude-3-5-sonnet-20241022-v2:0",
        "titan-text-express": "amazon.titan-text-express-v1",
        "titan-text-lite": "amazon.titan-text-lite-v1",
        "titan-embed-text": "amazon.titan-embed-text-v2:0"
      },
      "openai": {
        "gpt-4o": "gpt-4o",
        "gpt-4o-mini": "gpt-4o-mini",
        "gpt-4.1": "gpt-4.1-2025-04-14",
        "gpt-4-turbo": "gpt-4-turbo-preview",
        "o3": "o3",
        "o3-pro": "o3-pro",
        "o3-mini": "o3-mini",
        "o4-mini": "o4-mini",
        "gpt-4": "gpt-4",
        "gpt-3.5-turbo": "gpt-3.5-turbo"
      },
      "google": {
        "gemini-2.5-pro": "gemini-2.5-pro",
        "gemini-2.5-flash": "gemini-2.5-flash",
        "gemini-2.0-flash": "gemini-2.0-flash",
        "gemini-2.0-flash-thinking": "gemini-2.0-flash-thinking-experimental",
        "gemini-1.5-pro": "gemini-1.5-pro-002",
        "gemini-1.5-flash": "gemini-1.5-flash-002",
        "gemini-pro": "gemini-pro",
        "gemini-pro-vision": "gemini-pro-vision",
        "gemini-ultra": "gemini-ultra",
        "gemini-flash": "gemini-1.5-flash"
      },
      "deepseek": {
        "deepseek-v3": "deepseek-chat",
        "deepseek-r1": "deepseek-reasoner",
        "deepseek-chat": "deepseek-chat",
        "deepseek-reasoner": "deepseek-reasoner"
      }
    }
  },

  "agents": {
    "_comment": "Agent configurations and role definitions",
    
    "defaults": {
      "_comment": "Default settings inherited by all agents",
      "model": "${models.definitions.default}",
      "max_retries": 3,
      "retry_delay": 1000,
      "timeout": 120000,
      "memory": {
        "enabled": true,
        "max_context_length": 10
      }
    },
    
    "roles": {
      "_comment": "Role-specific agent configurations",
      
      "orchestrator": {
        "_extends": "${agents.defaults}",
        "model": "${models.definitions.analyzer}",
        "imperative": "Coordinate agent activities following P1→P2→P3→P4→↻",
        "capabilities": ["delegation", "planning", "coordination"],
        "constraints": {
          "max_delegation_depth": 3,
          "require_validation": true
        }
      },
      
      "questioner": {
        "_extends": "${agents.defaults}",
        "model": "${models.definitions.creative_reasoning}",
        "imperative": "Ask insightful questions to deepen understanding",
        "traits": ["curious", "analytical", "persistent"],
        "conversation": {
          "style": "socratic",
          "follow_up_probability": 0.8
        }
      },
      
      "answerer": {
        "_extends": "${agents.defaults}",
        "model": "${models.definitions.analyzer}",
        "imperative": "Provide comprehensive, well-reasoned answers",
        "traits": ["knowledgeable", "patient", "thorough"]
      },
      
      "researcher": {
        "_extends": "${agents.defaults}",
        "model": "${models.definitions.analyzer}",
        "imperative": "Conduct thorough research and analysis",
        "tools": ["web_search", "document_analysis", "data_extraction"],
        "memory": {
          "enabled": true,
          "max_context_length": 20,
          "use_long_term": true
        }
      },
      
      "coder": {
        "_extends": "${agents.defaults}",
        "model": "${models.definitions.coding}",
        "imperative": "Write clean, maintainable, and well-tested code",
        "capabilities": ["code_generation", "debugging", "refactoring", "testing"],
        "tools": ["code_editor", "test_runner", "linter", "formatter"]
      },
      
      "tester": {
        "_extends": "${agents.defaults}",
        "model": "${models.definitions.scientific_method}",
        "imperative": "Create comprehensive tests and validate functionality",
        "capabilities": ["test_generation", "test_execution", "coverage_analysis"],
        "tools": ["test_framework", "coverage_tools", "ci_cd"]
      }
    }
  },

  "paradigms": {
    "_comment": "Paradigm-specific configurations",
    
    "qa": {
      "name": "Question-Answer Paradigm",
      "agents": ["questioner", "answerer"],
      "orchestration": {
        "type": "turn-based",
        "max_exchanges": 10,
        "termination_conditions": ["consensus_reached", "max_exchanges", "user_interrupt"]
      }
    },
    
    "research": {
      "name": "Research Paradigm", 
      "agents": ["orchestrator", "researcher", "analyzer", "writer"],
      "orchestration": {
        "type": "pipeline",
        "stages": ["research", "analysis", "synthesis", "presentation"]
      }
    },
    
    "debug": {
      "name": "Debug Paradigm",
      "agents": ["orchestrator", "debugger", "tester", "validator"],
      "orchestration": {
        "type": "collaborative",
        "max_iterations": 5,
        "convergence_threshold": 0.9
      }
    },
    
    "development": {
      "name": "Software Development Paradigm",
      "agents": ["orchestrator", "coder", "tester", "reviewer"],
      "orchestration": {
        "type": "iterative",
        "phases": ["design", "implement", "test", "review", "refactor"]
      }
    }
  },

  "system": {
    "_comment": "System-wide settings",
    
    "provider_priority": ["anthropic", "deepseek", "openai", "google", "bedrock"],
    
    "logging": {
      "level": "${LOG_LEVEL:-INFO}",
      "format": "json",
      "outputs": ["console", "file"],
      "file": {
        "path": "${LOG_PATH:-logs/agno.log}",
        "rotation": "daily",
        "retention": 7
      }
    },
    
    "cache": {
      "enabled": true,
      "provider": "memory",
      "ttl": 3600,
      "max_size": "1GB",
      "eviction_policy": "lru"
    },
    
    "performance": {
      "max_concurrent_agents": 10,
      "request_timeout": 120000,
      "enable_streaming": true,
      "batch_size": 5
    },
    
    "paths": {
      "data": "${AGNO_DATA_PATH:-./data}",
      "cache": "${AGNO_CACHE_PATH:-./cache}",
      "logs": "${AGNO_LOG_PATH:-./logs}",
      "extensions": "${AGNO_EXTENSIONS_PATH:-./extensions}"
    }
  },

  "security": {
    "_comment": "Security and compliance settings",
    
    "api_keys": {
      "rotation_reminder_days": 90,
      "require_encryption_at_rest": true
    },
    
    "content_filtering": {
      "enabled": false,
      "providers": ["perspective", "openai-moderation"],
      "block_threshold": 0.8
    },
    
    "rate_limiting": {
      "enabled": true,
      "global_requests_per_minute": 1000,
      "per_user_requests_per_minute": 100
    },
    
    "compliance": {
      "pii_detection": false,
      "audit_logging": true,
      "data_retention_days": 90
    }
  },

  "observability": {
    "_comment": "Monitoring, metrics, and tracing configuration",
    
    "metrics": {
      "enabled": true,
      "provider": "prometheus",
      "endpoint": "${METRICS_ENDPOINT:-http://localhost:9090}",
      "interval": 60
    },
    
    "tracing": {
      "enabled": false,
      "provider": "opentelemetry",
      "endpoint": "${TRACING_ENDPOINT}",
      "sample_rate": 0.1
    },
    
    "health_checks": {
      "enabled": true,
      "endpoint": "/health",
      "checks": ["providers", "cache", "database"]
    }
  },

  "experiments": {
    "_comment": "Feature flags and experiments - Phase 2 feature",
    "enabled": false,
    "features": {
      "new_orchestration_algorithm": {
        "enabled": false,
        "rollout_percentage": 0
      },
      "enhanced_memory": {
        "enabled": false,
        "allowlist": []
      }
    }
  },

  "extensions": {
    "_comment": "Plugin and extension system - Phase 2 feature",
    "enabled": false,
    "autoload": true,
    "paths": ["${system.paths.extensions}"],
    "providers": {},
    "tools": {},
    "paradigms": {}
  },

  "profiles": {
    "_comment": "Environment-specific overrides",
    
    "development": {
      "system.logging.level": "DEBUG",
      "system.cache.enabled": false,
      "security.rate_limiting.enabled": false,
      "observability.metrics.enabled": false,
      "observability.tracing.enabled": false
    },
    
    "production": {
      "system.logging.level": "WARN",
      "system.performance.max_concurrent_agents": 50,
      "security.content_filtering.enabled": true,
      "observability.metrics.enabled": true,
      "observability.tracing.enabled": true
    },
    
    "testing": {
      "providers.anthropic.credentials.api_key": "test-key",
      "providers.openai.credentials.api_key": "test-key",
      "providers.google.credentials.api_key": "test-key",
      "system.cache.enabled": false,
      "system.logging.level": "DEBUG"
    }
  }
}